{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","inputText","setInputText","qrCodeText","setQRCodeText","className","type","placeholder","value","onChange","e","target","onClick","id","size","qrCodeURL","document","getElementById","toDataURL","replace","console","log","aEl","createElement","href","download","body","appendChild","click","removeChild","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"yNAyDeA,MAtDf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,mBAAS,IAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAmBA,OACE,sBAAKC,UAAU,MAAf,UACE,uEACA,sBAAKA,UAAU,WAAf,UACE,uBACEC,KAAK,OACLC,YAAY,cACZC,MAAOP,EACPQ,SAAU,SAAAC,GAAC,OAAIR,EAAaQ,EAAEC,OAAOH,UAEvC,uBACEF,KAAK,SACLE,MAAM,WACNI,QA9Be,WACrBR,EAAcH,SAgCZ,cAAC,IAAD,CACEY,GAAG,WACHC,KAAM,IACNN,MAAOL,IAET,uBACA,uBACEG,KAAK,SACLD,UAAU,eACVG,MAAM,WACNI,QAvCiB,WACrB,IAAMG,EAAYC,SAASC,eAAe,YACvCC,UAAU,aACVC,QAAQ,YAAa,sBACxBC,QAAQC,IAAIN,GACZ,IAAIO,EAAMN,SAASO,cAAc,KACjCD,EAAIE,KAAOT,EACXO,EAAIG,SAAW,cACfT,SAASU,KAAKC,YAAYL,GAC1BA,EAAIM,QACJZ,SAASU,KAAKG,YAAYP,UCVfQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFzB,SAASC,eAAe,SAM1Ba,M","file":"static/js/main.3c874749.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport QRCode from 'qrcode.react';\n\nfunction App() {\n\n  const [inputText, setInputText] = useState('');\n  const [qrCodeText, setQRCodeText] = useState('');\n\n  const generateQRCode = () => {\n    setQRCodeText(inputText);\n  }\n\n  const downloadQRCode = () => {\n    const qrCodeURL = document.getElementById('qrCodeEl')\n      .toDataURL(\"image/png\")\n      .replace(\"image/png\", \"image/octet-stream\");\n    console.log(qrCodeURL)\n    let aEl = document.createElement(\"a\");\n    aEl.href = qrCodeURL;\n    aEl.download = \"QR_Code.png\";\n    document.body.appendChild(aEl);\n    aEl.click();\n    document.body.removeChild(aEl);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Generate and download a QR code image</h1>\n      <div className=\"qr-input\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter input\"\n          value={inputText}\n          onChange={e => setInputText(e.target.value)}\n        />\n        <input\n          type=\"button\"\n          value=\"Generate\"\n          onClick={generateQRCode}\n        />\n      </div>\n      <QRCode\n        id=\"qrCodeEl\"\n        size={150}\n        value={qrCodeText}\n      />\n      <br />\n      <input\n        type=\"button\"\n        className=\"download-btn\"\n        value=\"Download\"\n        onClick={downloadQRCode}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}